/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dynamic.model.impl;

import com.dynamic.model.Countries;
import com.dynamic.model.CountriesModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Countries service. Represents a row in the &quot;z_Countries&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dynamic.model.CountriesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CountriesImpl}.
 * </p>
 *
 * @author Abhishek
 * @see CountriesImpl
 * @see com.dynamic.model.Countries
 * @see com.dynamic.model.CountriesModel
 * @generated
 */
public class CountriesModelImpl extends BaseModelImpl<Countries>
	implements CountriesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a countries model instance should use the {@link com.dynamic.model.Countries} interface instead.
	 */
	public static final String TABLE_NAME = "z_Countries";
	public static final Object[][] TABLE_COLUMNS = {
			{ "countryId", Types.BIGINT },
			{ "shortname", Types.VARCHAR },
			{ "countryName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table z_Countries (countryId LONG not null primary key,shortname VARCHAR(75) null,countryName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table z_Countries";
	public static final String ORDER_BY_JPQL = " ORDER BY countries.countryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY z_Countries.countryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dynamic.model.Countries"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dynamic.model.Countries"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.dynamic.model.Countries"),
			true);
	public static long COUNTRYNAME_COLUMN_BITMASK = 1L;
	public static long COUNTRYID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.dynamic.model.Countries"));

	public CountriesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _countryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCountryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _countryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Countries.class;
	}

	@Override
	public String getModelClassName() {
		return Countries.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("countryId", getCountryId());
		attributes.put("shortname", getShortname());
		attributes.put("countryName", getCountryName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		String shortname = (String)attributes.get("shortname");

		if (shortname != null) {
			setShortname(shortname);
		}

		String countryName = (String)attributes.get("countryName");

		if (countryName != null) {
			setCountryName(countryName);
		}
	}

	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_countryId = countryId;
	}

	@Override
	public String getShortname() {
		if (_shortname == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortname;
		}
	}

	@Override
	public void setShortname(String shortname) {
		_shortname = shortname;
	}

	@Override
	public String getCountryName() {
		if (_countryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryName;
		}
	}

	@Override
	public void setCountryName(String countryName) {
		_columnBitmask |= COUNTRYNAME_COLUMN_BITMASK;

		if (_originalCountryName == null) {
			_originalCountryName = _countryName;
		}

		_countryName = countryName;
	}

	public String getOriginalCountryName() {
		return GetterUtil.getString(_originalCountryName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Countries.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Countries toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Countries)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CountriesImpl countriesImpl = new CountriesImpl();

		countriesImpl.setCountryId(getCountryId());
		countriesImpl.setShortname(getShortname());
		countriesImpl.setCountryName(getCountryName());

		countriesImpl.resetOriginalValues();

		return countriesImpl;
	}

	@Override
	public int compareTo(Countries countries) {
		long primaryKey = countries.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Countries)) {
			return false;
		}

		Countries countries = (Countries)obj;

		long primaryKey = countries.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CountriesModelImpl countriesModelImpl = this;

		countriesModelImpl._originalCountryName = countriesModelImpl._countryName;

		countriesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Countries> toCacheModel() {
		CountriesCacheModel countriesCacheModel = new CountriesCacheModel();

		countriesCacheModel.countryId = getCountryId();

		countriesCacheModel.shortname = getShortname();

		String shortname = countriesCacheModel.shortname;

		if ((shortname != null) && (shortname.length() == 0)) {
			countriesCacheModel.shortname = null;
		}

		countriesCacheModel.countryName = getCountryName();

		String countryName = countriesCacheModel.countryName;

		if ((countryName != null) && (countryName.length() == 0)) {
			countriesCacheModel.countryName = null;
		}

		return countriesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{countryId=");
		sb.append(getCountryId());
		sb.append(", shortname=");
		sb.append(getShortname());
		sb.append(", countryName=");
		sb.append(getCountryName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.dynamic.model.Countries");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortname</column-name><column-value><![CDATA[");
		sb.append(getShortname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryName</column-name><column-value><![CDATA[");
		sb.append(getCountryName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Countries.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Countries.class
		};
	private long _countryId;
	private String _shortname;
	private String _countryName;
	private String _originalCountryName;
	private long _columnBitmask;
	private Countries _escapedModel;
}